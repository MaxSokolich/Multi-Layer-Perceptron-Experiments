import numpy as np

def minimum_distance_to_path(midpoints, point):
    def point_to_segment_dist(p1, p2, q):
        v = p2 - p1
        w = q - p1
        c1 = np.dot(w, v)
        if c1 <= 0:  # Closest to p1
            return np.linalg.norm(q - p1)
        c2 = np.dot(v, v)
        if c1 >= c2:  # Closest to p2
            return np.linalg.norm(q - p2)
        t = c1 / c2
        projection = p1 + t * v
        return np.linalg.norm(q - projection)
    
    point = np.array(point)
    midpoints = np.array(midpoints)
    min_distance = float('inf')
    
    for i in range(len(midpoints) - 1):
        p1 = midpoints[i]
        p2 = midpoints[i + 1]
        dist = point_to_segment_dist(p1, p2, point)
        min_distance = min(min_distance, dist)
    
    return min_distance

# Example usage:
# midpoints = np.array([[0, 0], [1, 1], [2, 0]])  
midpoints = np.load('postions.npy')# Midpoints of the path
# point = np.array([1, 0.5, 0.1 , 0.2])
point = midpoints[0]+midpoints[1]*0.01# Query point
print("Minimum Distance:", minimum_distance_to_path(midpoints, point))
